rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    function isAuthenticated() { return request.auth != null; }
    function isValidImage() {
      return request.resource.size < 5 * 1024 * 1024 && request.resource.contentType.matches('image/.*');
    }

    // Profile photos
    match /users/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImage() && fileName.matches('profile\\.(jpg|jpeg|png)');
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Post images
    match /posts/{postId}/{fileName} {
      // Public read for authenticated users (adjust if needed)
      allow read: if isAuthenticated();
      // Allow upload for authenticated users (owner check can be done via CF; here we allow client write)
      allow write: if isAuthenticated() && isValidImage() && fileName.matches('.*\\.(jpg|jpeg|png)');
      allow delete: if isAuthenticated();
    }

    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
